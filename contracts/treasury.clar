(define-constant ERR-NOT-AUTHORIZED (err u100))
(define-constant ERR-INVALID-AMOUNT (err u101))
(define-constant ERR-INSUFFICIENT-BALANCE (err u102))
(define-constant ERR-NOT-MEMBER (err u103))
(define-constant ERR-TRANSFER-FAILED (err u104))
(define-constant ERR-INVALID-APPROVAL (err u105))
(define-constant ERR-INVALID-WITHDRAWAL (err u106))
(define-constant ERR-ZERO-BALANCE (err u107))
(define-constant ERR-OVER-TOTAL (err u108))
(define-constant ERR-INVALID-SHARE (err u109))
(define-constant ERR-MIN-DEPOSIT (err u110))
(define-constant MIN-DEPOSIT u100)
(define-data-var total-balance uint u0)
(define-data-var club-shares uint u0)
(define-map member-balances principal { balance: uint, shares: uint })
(define-map approvals uint bool)
(define-constant INVESTMENT_CONTRACT 'SP000000000000000000002Q6VF78.investment-contract)
(define-constant VOTING_CONTRACT 'SP000000000000000000002Q6VF78.voting-contract)
(define-constant DISTRIBUTION_CONTRACT 'SP000000000000000000002Q6VF78.distribution-contract)
(define-read-only (get-member-balance (member principal))
  (map-get? member-balances member)
)
(define-read-only (get-total-balance)
  (var-get total-balance)
)
(define-read-only (get-total-shares)
  (var-get club-shares)
)
(define-read-only (get-approval (proposal-id uint))
  (map-get? approvals proposal-id)
)
(define-private (is-member (member principal))
  (is-some (map-get? member-balances member))
)
(define-private (validate-amount (amount uint))
  (and (> amount u0) (>= amount MIN-DEPOSIT))
)
(define-private (update-member (member principal) (new-balance uint) (new-shares uint))
  (map-set member-balances member { balance: new-balance, shares: new-shares })
)
(define-private (calculate-shares (amount uint))
  (if (is-eq (var-get total-balance) u0)
      amount
      (/ (* amount (var-get club-shares)) (var-get total-balance))
  )
)
(define-public (join-club (amount uint))
  (let (
        (valid (validate-amount amount))
        (member tx-sender)
      )
    (asserts! valid ERR-INVALID-AMOUNT)
    (try! (stx-transfer? amount tx-sender (as-contract tx-sender)))
    (let (
          (current (default-to {balance: u0, shares: u0} (map-get? member-balances member)))
          (new-shares (+ (get shares current) (calculate-shares amount)))
          (new-balance (+ (get balance current) amount))
        )
      (update-member member new-balance new-shares)
      (var-set total-balance (+ (var-get total-balance) amount))
      (var-set club-shares (+ (var-get club-shares) new-shares))
      (ok new-shares)
    )
  )
)
(define-public (deposit (amount uint))
  (let (
        (valid (validate-amount amount))
        (member tx-sender)
      )
    (asserts! (is-member member) ERR-NOT-MEMBER)
    (asserts! valid ERR-INVALID-AMOUNT)
    (try! (stx-transfer? amount tx-sender (as-contract tx-sender)))
    (let (
          (current (unwrap! (map-get? member-balances member) ERR-NOT-MEMBER))
          (new-balance (+ (get balance current) amount))
          (new-shares (+ (get shares current) (calculate-shares amount)))
        )
      (update-member member new-balance new-shares)
      (var-set total-balance (+ (var-get total-balance) amount))
      (var-set club-shares (+ (var-get club-shares) new-shares))
      (ok true)
    )
  )
)
(define-public (withdraw (amount uint))
  (let (
        (member tx-sender)
        (current (unwrap! (map-get? member-balances member) ERR-NOT-MEMBER))
        (balance (get balance current))
        (shares (get shares current))
      )
    (asserts! (<= amount balance) ERR-INSUFFICIENT-BALANCE)
    (asserts! (> amount u0) ERR-INVALID-AMOUNT)
    (let (
          (new-balance (- balance amount))
          (total (var-get total-balance))
          (share-value (if (> total u0) (/ total (var-get club-shares)) u0))
          (shares-to-burn (if (> share-value u0) (/ amount share-value) u0))
        )
      (asserts! (>= shares shares-to-burn) ERR-INVALID-SHARE)
      (update-member member new-balance (- shares shares-to-burn))
      (var-set total-balance (- (var-get total-balance) amount))
      (var-set club-shares (- (var-get club-shares) shares-to-burn))
      (try! (as-contract (stx-transfer? amount tx-sender member)))
      (ok true)
    )
  )
)
(define-public (transfer-to-investment (proposal-id uint) (invest-amount uint))
  (begin
    (asserts! (contract-call? VOTING_CONTRACT is-approved proposal-id) ERR-INVALID-APPROVAL)
    (asserts! (<= invest-amount (var-get total-balance)) ERR-OVER-TOTAL)
    (asserts! (> invest-amount u0) ERR-INVALID-AMOUNT)
    (map-set approvals proposal-id true)
    (let (
          (success (contract-call? INVESTMENT_CONTRACT execute-investment invest-amount))
        )
      (match success
        ok-value (begin
                   (var-set total-balance (- (var-get total-balance) invest-amount))
                   (ok true)
                 )
        err-value ERR-TRANSFER-FAILED
      )
    )
  )
)
(define-public (distribute-returns (amount uint))
  (begin
    (asserts! (contract-call? DISTRIBUTION_CONTRACT can-distribute) ERR-INVALID-APPROVAL)
    (asserts! (<= amount (var-get total-balance)) ERR-INSUFFICIENT-BALANCE)
    (var-set total-balance (+ (var-get total-balance) amount))
    (ok true)
  )
)
(define-public (get-member-shares (member principal))
  (match (map-get? member-balances member)
    m (ok { balance: (get balance m), shares: (get shares m) })
    ERR-NOT-MEMBER
  )
)